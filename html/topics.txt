[![](../pic/logo.jpeg)](home.html) Тематический указатель
===========================

Синтаксис
------------------

* Программы
    * [Модули `module`](1.html#общая-картина)
    * Включение определений 
        * [из других модулей: `import`](1.html#общая-картина)
        * [с полным именем: `import` ... `qualified` ... `as`](4.html#упражнения)
        * [отбрасывая не нужные определения: `import` ... `hiding`](6.html#обобщённая-формулировка-категории-клейсли)
    * [Компиляция программ](8.html#как-пишутся-программы)
    * [Программы и библиотеки](18.html#пакеты)
* [Типы](1.html#типы)
    * [Определение типов: `data`](1.html#типы)
    * [Синонимы типов: `type`](2.html#строки-и-символы)
    * [Кортежи](2.html#типы)
    * [Записи, структуры с полями](7.html#записи)
    * [Тип-обёртка `newtype`](7.html#тип-обёртка-newtype)
    * [Типы типов: kinds](17.html#семейства-типов)
* [Значения](1.html#значения)
    * [Определение значений](1.html#значения)
    * [Локальные переменные (`let` и `where`)](4.html#локальные-переменные)
    * [Условные выражения](4.html#условные-выражения)
        * [`if then else`](4.html#if-выражения)
        * [охранные выражения](4.html#охранные-выражения)
        * [`case`-выражения](4.html#case-выражения)
    * [Сопоставление с образцом](4.html#декомпозиция)
        * [Ленивые образцы](11.html#ленивее-некуда)
        * [Энергичные образцы](9.html#энергичные-образцы)
        * [`@`-образцы](4.html#сопоставление-с-образцом)
    * [Лямбда-функции или безымянные функции](4.html#безымянные-функции)
    * [Приоритет инфиксных операций: `infix`, `infixl`, `infixr`](5.html#приоритет-инфиксных-операций) 
* [Классы](1.html#классы-типов)
    * [Определение классов `class`](1.html#классы-типов)
    * [Экземпляры классов `instance`](1.html#экземпляры-классов-типов)
    * [Суперклассы](1.html#суперклассы)
    * [Автоматическое разрешение многозначности: `default`](3.html#проверка-типов-с-контекстом)
    * [Ограничение мономорфизма](3.html#ограничение-мономорфизма)
    * [Автоматический вывод экземпляров классов типов: `deriving`](2.html#автоматический-вывод-экземпляров-классов-типов)
* [`do`-нотация](17.html#сахар-для-монад-do-нотация)
* [Генераторы списков](17.html#генераторы-списков)
* [Расширения](17.html#расширения)
    * [Полиморфизм высших порядков: forall](17.html#полиморфизм-высших-порядков)
    * [Семейства типов: `type family`, `type instance`, `data family`](17.html#семейства-типов)

Типы 
---------------

* [Списки `[a]`](3.html#рекурсивные-типы)
* [Примитивные типы: строки, символы, числа](2.html#типы)
* [Монады](6.html)
    * [`IO`](8.html)
    * [`[a]`](6.html#многозначные-функции)
    * [`Maybe`](6.html#частично-определённые-функции)
    * [`State`](6.html#функции-с-состоянием)
    * [`Writer`](6.html#функции-накопители)
    * [`Reader`](6.html#функции-с-окружением)
    * [`ST`](7.html#монада-изменяемых-значений-st)
* [Ассоциативные массивы `Map`](7.html#тип-map)
* Множества
    * [`Set`](19.html#алгоритм-эвристического-поиска-а)
    * [`HashSet`](19.html#оценка-быстродействия-с-помощью-criterion)
* [Деревья `Tree`](7.html#накопление-списков)
* [Очереди с приритетом](19.html#алгоритм-эвристического-поиска-а)

Классы
------------

* [Печать значений `Show`](1.html#классы-типов)
* Сравнение значений
    * [`Eq`](2.html#класс-eq.-сравнение-на-равенство)
    * [`Ord`](4.html#какой-стиль-лучше)
* Перечисления
    * [`Enum`](17.html#перечисления)
* [Арифметика](2.html#арифметика)
    * [`Num`](2.html#класс-num.-сложение-и-умножение)
    * [`Fractional`](2.html#класс-fractional.-деление)
    * [`Real`](2.html#преобразование-численных-типов)
    * [`RealFrac`](2.html#преобразование-численных-типов)
* [Функторы и монады](6.html)
    * [`Functor`](6.html#функторы)
    * [`Applicative`](6.html#аппликативные-функторы)
    * [`Monad`](6.html#монады)
    * [Монадные трансформеры](8.html#композиция-монад)
    * [`do`-нотация](17.html#сахар-для-монад-do-нотация)
* [`Monoid`](6.html#класс-monoid)
    

Функциональное программирование
------------------------------------

* [Функции высшего порядка](5.html)
* [Чистота функций](8.html#чистота-и-побочные-эффекты)
* [Строгая типизация](1.html#типы)
* Стратегии редукции выражений
    * [Нормальная (по имени) и энергичная (по значению)](9.html#стратегии-вычислений)
    * [Ленивая (по необходимости)](9.html#вычисление-по-необходимости)    
* [Лямбда исчисление](14.html)
* Алгебраические типы данных
    * [основы](3.html)
    * [подход из теории категорий](16.html#индуктивные-и-коиндуктивные-типы)
    

Оптимизация программ
------------------------

* [Вычисление программ в GHC](10.html)
* [Профилирование](10.html#статистика-выполнения-программы)
* [Оценка расхода памяти](10.html#представление-значений-в-памяти.-оценка-занимаемой-памяти)
* [Оценка быстродействия в criterion](19.html#оценка-быстродействия-с-помощью-criterion)
* [Проверка свойств программы в QuickCheck](19.html#тестирование-с-помощью-quickcheck)
* [Аннотации строгости, ограничение лени](9.html#аннотации-строгости)
* Прагмы оптимизации
    * [Встраивание выражений INLINE](10.html#прагма-inline)
    * [Встраивание значений UNPACK](10.html#прагма-unpack)
    * [Преобразование программ RULES](10.html#прагма-rules)

Средства разработки
-------------------------

* [Начало работы с Haskell](appendix.html#Начало работы с Haskell)
* [Компилятор GHC](10.html)
* [Интерпретатор ghci](2.html#интерпретатор)
* [Установка и создание библиотек в Cabal](18.html#пакеты)
* [Репозиторий библиотек Hackage](18.html#установка-пакета)
* [Создание документации в Haddock](18.html#создание-документации-с-помощью-haddock)
* [Поисковик алгоритмов Hoogle](2.html#документация)
* [Оценка быстродействия в criterion](19.html#оценка-быстродействия-с-помощью-criterion)
* [Проверка свойств программы в QuickCheck](19.html#тестирование-с-помощью-quickcheck)
* [Стандартные структуры данных и алгоритмы](appendix.html#стандартные-библиотеки)
* [Если что-то непонятно или не получается: haskell-cafe](appendix.html#и-все-все-все)

